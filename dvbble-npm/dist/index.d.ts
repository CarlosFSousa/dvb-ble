export default class DVBDeviceBLE {
    private isConnected;
    private reconnectAttempts;
    private maxReconnectAttempts;
    private userRequestedDisconnect;
    private SERVICE_UUID;
    private CHARACTERISTIC_UUID;
    private mtu;
    private device;
    private service;
    private characteristic;
    private connectCallback;
    private connectingCallback;
    private disconnectCallback;
    private messageCallback;
    private imageUploadProgressCallback;
    private imageUploadFinishedCallback;
    private buffer;
    private logger;
    private seq;
    private uploadImage;
    private uploadOffset;
    private uploadSlot;
    private uploadIsInProgress;
    private duSerialNumber;
    private isRegistered;
    private serviceDVB;
    private serviceInfo;
    private listOfFiles;
    private shortname;
    private serialNumber;
    private firmwareVersion;
    private hardwareVersion;
    private duDeviceUIDVersion;
    private DEVICE_INFORMATION_SERVICE_UUID;
    private SERIAL_NUMBER_UUID;
    private FIRMWARE_REVISION_UUID;
    private HARDWARE_REVISION_UUID;
    private DVB_SERVICE_UUID;
    private LIST_FILES_UUID;
    private WRITE_TO_DEVICE_UUID;
    private READ_FROM_DEVICE_UUID;
    private FORMAT_STORAGE_UUID;
    private SHORTNAME_UUID;
    private DU_SHORTNAME_UUID;
    private DU_DEVICE_UID_UUID;
    private DU_SERIAL_NUMBER_UUID;
    private DU_SERVER_REGISTRATION_UUID;
    private DU_MANUFACTURER_SERIAL_UUID;
    private DU_SENSOR_SETTING_UUID;
    private manufacturerSerialNumber;
    private requestBrowserDevice;
    private requestMobileDevice;
    private isBleDevice;
    private isBluetoothDevice;
    private getDeviceDisplayName;
    connect(): Promise<void>;
    getDeviceName(): string | undefined;
    setDeviceInfo(): Promise<void>;
    private handleDisconnect;
    private reconnect;
    disconnect(): void | Promise<void>;
    onConnecting(callback: () => void): this;
    onConnect(callback: () => void): this;
    onDisconnect(callback: () => void): this;
    onMessage(callback: (message: {
        op: number;
        group: number;
        id: number;
        data: unknown;
        length: number;
    }) => void): this;
    onImageUploadProgress(callback: (progress: {
        percentage: number;
    }) => void): this;
    onImageUploadFinished(callback: () => void): this;
    private connected;
    private disconnected;
    private sendMessage;
    private notification;
    private processMessage;
    cmdReset(): Promise<void>;
    smpEcho(message: string | number | object): Promise<void>;
    cmdImageState(): Promise<void>;
    cmdImageErase(): Promise<void>;
    cmdImageTest(hash: Uint8Array): Promise<void>;
    cmdImageConfirm(hash: Uint8Array): Promise<void>;
    private hash;
    private uploadNext;
    cmdUpload(image: Uint8Array, slot?: number): Promise<void>;
    imageInfo(image: BufferSource): Promise<{
        version: string;
        hash: Uint8Array;
    }>;
    getShortName(): string | null;
    setShortName(shortname?: string): Promise<void>;
    getFileList(): {
        name: string;
        length: string;
    }[];
    private setFileList;
    getFileContent(name: string, progressCallback: (progress: number) => void): Promise<Uint8Array<ArrayBuffer> | undefined>;
    formatStorage(): Promise<void>;
    getSerialNumber(): string | null;
    setSerialNumber(): Promise<void>;
    getFirmwareVersion(): string | null;
    setFirmwareVersion(): Promise<void>;
    getHardwareVersion(): string | null;
    setHardwareVersion(): Promise<void>;
    getDUDeviceUID(): string | null;
    setDUDeviceUID(): Promise<void>;
    getDUSerialNumber(): string | null;
    readDUSerialNumber(): Promise<void>;
    getManufacturerSerialNumber(): string | null;
    readManufacturerSerialNumber(): Promise<void>;
    private calculateSHA3Signature;
    verifyDevice(): Promise<boolean>;
    calibrateAccel(): Promise<void>;
    calibrateMagn(): Promise<void>;
    testHardware(): Promise<void>;
}
